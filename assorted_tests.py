from scheduler import *
# Test file for validating conversions between I/O

def main():
    tester = TestMachine()
    tester.test_generate_shifts()
    tester.test_convert_std_time()
    tester.test_availability_to_vertices()

class TestMachine():
    ben_avail = {
        'name': 'Ben S',
        'hours': '8',
        'M': '10:00-13:00, 13:00-17:00',
        'T': '10:00-17:00',
        'W': '10:00-12:00, 13:00-17:00',
        'R': '10:00-13:00',
        'F': '10:00-12'
    }
    short_avail = {
        'name': 'Shortie',
        'hours': '1',
        'M': '10:00-13:00'
    }
    def __init__(self):
        self.scheduler = ScheduleInterpreter()

    def test_generate_shifts(self):
        # The UID format is 'T##DMMMM':
        #   T = Type of time slot (shift versus worker)
        #   # = ID of time slot (first worker's id is 00)
        #   D = Day of the week
        #   M = Minutes from 0-1439 (24 * 60 - 1) of given day
        shifts = self.scheduler.generate_shifts(self.short_avail, type_id=2)
        goal = [20000600, 20000615, 20000630, 20000645, 20000660, 20000675, 20000690, 20000705, 20000720, 20000735, 20000750, 20000765]
        try:
            assert(shifts == goal)
        except AssertionError:
            print(shifts)


    # For one employee availability
    def test_availability_to_vertices(self):
        base = [10001000,10001015,10001030,10001045,10001100,10001115,10001130,10001145,
        10001200,10001215,10001230,10001245,10001300,10001315,10001330,10001345,
        10001400,10001415,10001430,10001445,10001500,10001515,10001530,10001545,
        10001600,10001615,10001630,10001645,10001700,10001715,10001730,10001745]

        M = [10001000,10001015,10001030,10001045,10001100,10001115,10001130,10001145,10001300,10001315,10001330,10001345,10001400,10001415,10001430,10001445,10001500,10001515,10001530,10001545,10001600,10001615,10001630,10001645,10001700,10001715,10001730,1000173]
        T = [10011000, 10011015, 10011030, 10011045, 10011100, 10011115, 10011130, 10011145, 10011200, 10011215, 10011230, 10011245, 10011300, 10011315, 10011330, 10011345, 10011400, 10011415, 10011430, 10011445, 10011500, 10011515, 10011530, 10011545, 10011600, 10011615, 10011630, 10011645, 10011700, 10011715, 10011730, 1001173]
        W = [10021000, 10021015, 10021030, 10021045, 10021100, 10021115, 10021130, 10021145, 10021200, 10021215, 10021230, 10021245, 10021300, 10021315, 10021330, 10021345, 10021400, 10021415, 10021430, 10021445, 10021500, 10021515, 10021530, 10021545, 10021600, 10021615, 10021630, 10021645, 10021700, 10021715, 10021730, 1002173]
        R = [10031000, 10031015, 10031030, 10031045, 10031100, 10031115, 10031130, 10031145, 10031200, 10031215, 10031230, 1003123]
        F = [10041000, 10041015, 10041030, 10041045, 10041100, 10041115, 10041130, 10041145]

        goal = M+T+W+R+F
        flat = self.scheduler.flatten_time_ranges(self.ben_avail)
        try:
            assert(flat == goal)
        except AssertionError:
            print(flat)

    def test_convert_std_time(self):
        # From 10 am to 12 pm
        result = self.scheduler.create_time_range('10:00', '24:00')
        goal = [600, 615, 630, 645, 660, 675, 690, 705, 720, 735, 750, 765, 780, 795, 810, 825, 840, 855, 870, 885, 900, 915, 930, 945, 960, 975, 990, 1005, 1020, 1035, 1050, 1065, 1080, 1095, 1110, 1125, 1140, 1155, 1170, 1185, 1200, 1215, 1230, 1245, 1260, 1275, 1290, 1305, 1320, 1335, 1350, 1365, 1380, 1395, 1410, 1425]
        try:
            assert(result == goal)
        except AssertionError:
            print(result)


if __name__ == '__main__':
    main()
